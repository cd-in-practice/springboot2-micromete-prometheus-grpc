
plugins {
	id 'org.springframework.boot' version '2.2.8.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'com.google.protobuf' version '0.8.12'
	id 'java'
	id 'idea'
}

group = 'codes.showme.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
//	mavenCentral()
	maven{
		url 'http://maven.aliyun.com/nexus/content/repositories/central/'
	}
}

sourceSets {
	main {
		proto {
			// In addition to the default 'src/main/proto'
			srcDir 'src/main/protobuf'
			srcDir 'src/main/protocolbuffers'
			// In addition to the default '**/*.proto' (use with caution).
			// Using an extension other than 'proto' is NOT recommended,
			// because when proto files are published along with class files, we can
			// only tell the type of a file from its extension.
			include '**/*.protodevel'
		}
		java {
			srcDir 'src/main/java'
			srcDir '$projectDir/src/generated/main/java'
		}
	}
	test {
		proto {
			// In addition to the default 'src/test/proto'
			srcDir 'src/test/protocolbuffers'
		}
	}
}

dependencies {
	//	grpc
	compile "io.grpc:grpc-protobuf:1.27.1"
	compile "io.grpc:grpc-stub:1.27.1"
	compile 'io.github.lognet:grpc-spring-boot-starter:3.5.5'

	// springboot
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// monitor
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'io.micrometer:micrometer-registry-prometheus:1.5.2'
	compile 'io.micrometer:micrometer-core:1.5.2'


	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}
idea {
	module {
		sourceDirs += file("$projectDir/src/generated/main/java")
		sourceDirs += file("$projectDir/src/generated/main/grpc")
		generatedSourceDirs += file("$projectDir/src/generated/main/java")
		generatedSourceDirs += file("$projectDir/src/generated/main/grpc")
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.11.0"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:1.27.1"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {
				outputSubDir = 'java'
			}
		}
		// 删除grpc生成文件
		all().each { task ->
			// println "" + task + " -> " + task.getClass()
			// println "Output dirs: " + task.allOutputDirs
			task.doFirst {
				delete(task.outputs)
			}
		}
	}

	generatedFilesBaseDir = "$projectDir/src/generated"
}




test {
	useJUnitPlatform()
}
